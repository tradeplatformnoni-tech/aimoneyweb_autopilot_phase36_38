#!/usr/bin/env python3

"""
✅ AI Money Web — Auto Validation + Starter Loop
Runs in one go:
- Validates API/WS health
- Launches fallback poll for Alpaca account
- Starts paper trading loop (supervisor call)
"""

import asyncio
import json
import time
import subprocess
import requests
import websockets

API_BASE = "http://127.0.0.1:8000"
WS_URL = "ws://127.0.0.1:8000/ws/alpaca_status"
ALPACA_API = f"{API_BASE}/api/alpaca_status"
PING = f"{API_BASE}/control/ping"

async def check_websocket():
    try:
        async with websockets.connect(WS_URL) as ws:
            print("✅ WebSocket connected: /ws/alpaca_status")
            await ws.send("ping")
            msg = await ws.recv()
            print(f"📥 WS Message: {msg[:80]}...")
            return True
    except Exception as e:
        print(f"❌ WS error: {e}")
        return False

def fallback_poll():
    print("🔁 Starting fallback polling for Alpaca status...")
    try:
        while True:
            resp = requests.get(ALPACA_API, timeout=5)
            if resp.status_code == 200:
                data = resp.json()
                print(f"✅ Alpaca status: {data}")
            else:
                print("⚠️ Alpaca API error", resp.status_code)
            time.sleep(5)
    except KeyboardInterrupt:
        print("🔚 Polling stopped.")

def run_start_paper():
    print("🚀 Starting paper trading supervisor...")
    try:
        subprocess.run(["make", "start-paper"], check=True)
    except subprocess.CalledProcessError as e:
        print("❌ Error running `make start-paper`:", e)

def validate_api():
    print("🔍 Checking API...")
    try:
        r = requests.get(PING)
        if r.status_code == 200:
            print("✅ FastAPI live:", r.json())
        else:
            print("❌ FastAPI ping failed")
    except Exception as e:
        print("❌ Exception on API ping:", e)

def validate_alpaca():
    try:
        r = requests.get(ALPACA_API)
        if r.status_code == 200:
            print("✅ Alpaca API responds:", r.json())
        else:
            print("❌ Alpaca API unreachable:", r.status_code)
    except Exception as e:
        print("❌ Alpaca API check failed:", e)

async def main():
    validate_api()
    validate_alpaca()

    print("📡 Checking WebSocket connection...")
    ws_ok = await check_websocket()

    if not ws_ok:
        print("🛠️ WebSocket inactive, falling back to polling...")
        fallback_poll()

    print("📈 Launching paper trade...")
    run_start_paper()

if __name__ == "__main__":
    asyncio.run(main())

