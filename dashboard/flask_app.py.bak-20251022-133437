# ==============================================================
# üß† NeoLight Wealth Mesh Dashboard
# Phase 4400 ‚Äî Flask Visualization Layer
# ==============================================================

from flask import Flask, jsonify, render_template_string
import json, pathlib, os, time, requests, plotly.graph_objects as go

app = Flask(__name__)

# --------------------------------------------------------------
# Helper: Safe JSON Loader
# --------------------------------------------------------------
def load_json_safe(path):
    p = pathlib.Path(path)
    if not p.exists():
        return {}
    try:
        return json.loads(p.read_text())
    except Exception as e:
        return {"error": str(e)}

# --------------------------------------------------------------
# Helper: Fetch Crypto + Gold Prices
# --------------------------------------------------------------
def fetch_crypto_prices():
    try:
        url = "https://api.coingecko.com/api/v3/simple/price"
        ids = "bitcoin,ethereum,gold"
        r = requests.get(url, params={"ids": ids, "vs_currencies": "usd"}, timeout=5)
        data = r.json()
        return {
            "BTC": data.get("bitcoin", {}).get("usd"),
            "ETH": data.get("ethereum", {}).get("usd"),
            "GOLD": data.get("gold", {}).get("usd"),
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
    except Exception as e:
        return {"error": str(e)}

# --------------------------------------------------------------
# Route: Main Dashboard
# --------------------------------------------------------------
@app.route('/')
def index():
    portfolio = load_json_safe("runtime/portfolio.json")
    telemetry = load_json_safe("logs/telemetry_push.json")
    risk = load_json_safe("config/risk_policy.json")
    prices = fetch_crypto_prices()

    fig = go.Figure()
    if isinstance(prices, dict) and "BTC" in prices:
        labels = list(prices.keys())[:-1]
        values = [prices[k] for k in labels if isinstance(prices[k], (int, float))]
        fig.add_trace(go.Bar(x=labels, y=values, marker_color=['#f2a900', '#627eea', '#ffd700']))
        fig.update_layout(title="Live Prices (USD)", template="plotly_dark", height=320)
        chart_html = fig.to_html(full_html=False)
    else:
        chart_html = "<p>‚ùå Could not fetch prices from CoinGecko.</p>"

    html = """
    {% raw %}
    <html>
      <head>
        <title>NeoLight Wealth Mesh Dashboard</title>
        <meta http-equiv="refresh" content="15">
        <style>
          body { background-color:#0a0f14; color:#e8e8e8; font-family:monospace; }
          h1 { color:#00ff9d; }
          h2 { color:#00ffff; }
          .section { margin-bottom:20px; padding:10px; border:1px solid #222; border-radius:8px; }
          pre { color:#b2f7ff; }
          footer { color:#777; margin-top:30px; }
        </style>
      </head>
      <body>
        <h1>üß† NeoLight Wealth Mesh Dashboard</h1>

        <div class="section">
          <h2>ü™ô Live BTC/ETH/GOLD Prices</h2>
          <pre>{{ prices }}</pre>
          {{ chart_html|safe }}
        </div>

        <div class="section">
          <h2>üí∞ Portfolio (runtime/portfolio.json)</h2>
          <pre>{{ portfolio }}</pre>
        </div>

        <div class="section">
          <h2>üìä Telemetry (logs/telemetry_push.json)</h2>
          <pre>{{ telemetry }}</pre>
        </div>

        <div class="section">
          <h2>üõ°Ô∏è Risk Policy (config/risk_policy.json)</h2>
          <pre>{{ risk }}</pre>
        </div>

        <footer>
          <small>Auto-refresh every 15s ‚Ä¢ Last updated {{ now }}</small>
        </footer>
      </body>
    </html>
    {% endraw %}
    """
    return render_template_string(
        html,
        prices=json.dumps(prices, indent=2),
        portfolio=json.dumps(portfolio, indent=2),
        telemetry=json.dumps(telemetry, indent=2),
        risk=json.dumps(risk, indent=2),
        chart_html=chart_html,
        now=time.strftime('%Y-%m-%d %H:%M:%S')
    )

# --------------------------------------------------------------
# API Routes
# --------------------------------------------------------------
@app.route('/api/prices')
def api_prices():
    return jsonify(fetch_crypto_prices())

@app.route('/api/portfolio')
def api_portfolio():
    return jsonify(load_json_safe("runtime/portfolio.json"))

@app.route('/api/telemetry')
def api_telemetry():
    return jsonify(load_json_safe("logs/telemetry_push.json"))

@app.route('/api/risk')
def api_risk():
    return jsonify(load_json_safe("config/risk_policy.json"))

# --------------------------------------------------------------
# Entry Point
# --------------------------------------------------------------
if __name__ == '__main__':
    import sys
    port = 5050
    if '--port' in sys.argv:
        try:
            port = int(sys.argv[sys.argv.index('--port') + 1])
        except Exception:
            pass

    print(f"üåç Dashboard live on http://127.0.0.1:{port}")
    app.run(host='0.0.0.0', port=port)

