from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
import asyncio, json, os
from pathlib import Path

app = FastAPI(title="AI Money Web")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_credentials=True,
    allow_methods=["*"], allow_headers=["*"],
)

LOG_DIR = Path("logs")
STATUS_FILE = LOG_DIR / "alpaca_status.json"

@app.get("/")
def root():
    # Keep JSON root stable for tests; dashboard has its own route
    return {"message": "âœ… AI Money Web Backend is alive"}

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard():
    return """
    <!doctype html>
    <html>
      <head>
        <title>AI Money Web</title>
        <meta charset="utf-8" />
      </head>
      <body style="background:#0f172a;color:#e2e8f0;font-family:system-ui,Segoe UI,Inter,sans-serif">
        <h1>ðŸš€ AI Money Web Dashboard</h1>
        <pre id="out">connectingâ€¦</pre>
        <script>
          const out = document.getElementById('out');
          const ws = new WebSocket("ws://"+location.host+"/ws/alpaca_status");
          ws.onopen = () => out.textContent = "WS connectedâ€¦";
          ws.onmessage = (e) => {
            try { out.textContent = JSON.stringify(JSON.parse(e.data), null, 2); }
            catch { out.textContent = e.data; }
          };
          ws.onclose = () => out.textContent += "\\nWS closed";
        </script>
      </body>
    </html>
    """

@app.get("/api/alpaca_status")
def api_alpaca_status():
    try:
        if STATUS_FILE.exists():
            with open(STATUS_FILE) as f:
                data = json.load(f)
        else:
            data = {"status":"connected","equity":100000.0,"cash":25000.0,"source":"bootstrap"}
        return JSONResponse(data)
    except Exception as e:
        return JSONResponse({"status":"error","message":str(e)}, status_code=500)

@app.websocket("/ws/alpaca_status")
async def websocket_alpaca_status(ws: WebSocket):
    await ws.accept()
    last_sent = ""
    try:
        while True:
            try:
                if STATUS_FILE.exists():
                    content = STATUS_FILE.read_text()
                    if content != last_sent:
                        await ws.send_text(content)
                        last_sent = content
                else:
                    await ws.send_json({"status":"booting","note":"waiting for paper_trader"})
            except Exception as e:
                await ws.send_json({"status":"error","message":str(e)})
            await asyncio.sleep(2)
    except WebSocketDisconnect:
        pass
