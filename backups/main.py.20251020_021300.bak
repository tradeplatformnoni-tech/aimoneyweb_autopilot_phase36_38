from fastapi import FastAPI, WebSocket, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import asyncio, random, os
from dotenv import load_dotenv; load_dotenv()
from ai.swarm.coord import broadcast_signal
from ai.swarm.evolve import mutate_weights
from ai.swarm.vote import consensus
from ai.swarm.heartbeat import ping
from ai.risk.var_calc import value_at_risk
from ai.sentiment.feed import sentiment_boost
from ai.brokers.router import account_equity_cash, submit_market

app=FastAPI(title="AI Money Web Swarm (76–82)")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])

EQUITY=[]

@app.get("/")
def root(): return {"message":"✅ Swarm node active"}

@app.get("/api/health")
def health(): return {"alive":True}

@app.post("/api/swarm")
async def swarm_post(req:Request):
    data=await req.json()
    sig=data.get("signal",0)
    return {"ack":"ok","mirror":sig}

@app.websocket("/ws/swarm")
async def ws(ws:WebSocket):
    await ws.accept()
    while True:
        eq,ca=account_equity_cash()
        EQUITY.append(eq)
        pnl=(eq-100000)/100000
        var=value_at_risk([pnl])
        sent=sentiment_boost("AAPL")
        votes=[random.uniform(-1,1) for _ in range(3)]
        sig=consensus(votes)+sent
        if abs(sig)>1: sig*=0.5
        submit_market("AAPL","buy" if sig>0 else "sell",1)
        broadcast_signal(sig)
        mutate_weights()
        await ws.send_json({"eq":eq,"signal":sig,"var":var,"votes":votes})
        await asyncio.sleep(5)

@app.get("/dashboard",response_class=HTMLResponse)
def dash(): return HTMLResponse(open("static/dashboard.html").read())
