from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from dotenv import load_dotenv
import asyncio, os, requests, random, joblib
from ai.ai_brain import ensure_db, log_trade, learn

load_dotenv(); ensure_db()
app=FastAPI(title="AI Money Web Trainer Daemon")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])

MODEL_PATH="models/active_model.pkl"
ACTIVE_MODEL=joblib.load(MODEL_PATH) if os.path.exists(MODEL_PATH) else {"weights":[0,1],"score":0}

@app.get("/")
def root():
    return {"message":"âœ… AI Money Web Trainer Daemon Live","model_score":ACTIVE_MODEL.get("score",0)}

@app.get("/api/alpaca_status")
def alpaca_status():
    try:
        equity=100000+random.uniform(-500,500)
        cash=25000+random.uniform(-200,200)
        pnl=(equity-100000)/100000
        risk=abs(pnl)+0.01
        log_trade(equity,pnl,risk)
        score=learn()
        adjusted=score*ACTIVE_MODEL.get('weights',[0,1])[1]
        return {"status":"mock","equity":equity,"cash":cash,"adaptive_score":score,"adjusted_signal":adjusted}
    except Exception as e:
        return {"status":"error","detail":str(e)}

@app.websocket("/ws/alpaca_status")
async def ws_alpaca(ws:WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json(alpaca_status())
            await asyncio.sleep(3)
    except WebSocketDisconnect:
        print("ðŸ”Œ Client disconnected")

@app.get("/dashboard",response_class=HTMLResponse)
def dashboard():
    if os.path.exists("static/dashboard.html"):
        return HTMLResponse(open("static/dashboard.html").read())
    return HTMLResponse("<h2>Dashboard missing. Re-run setup.</h2>")
