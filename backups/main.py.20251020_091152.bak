from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from dotenv import load_dotenv; load_dotenv()
import asyncio, os, json, time, random, datetime, pathlib

from ai.optimizer.bayes import BayesOptimizer
from ai.optimizer.canary import is_canary_good
from ai.safety.kill_switch import tripped
from ai.safety.chaos import maybe_fault
from ai.mesh.edge_mesh import edge_heartbeat

app = FastAPI(title="AI Money Web :: Optimizer & Safety (131â€“150)")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])

STATE = {
    "mode":"trading",
    "risk_cap":0.03,
    "pnl_pct":0.0,
    "max_dd_pct":0.0,
    "var_est":0.01,
    "equity":100000.0
}
OPT = BayesOptimizer()
AUDIT_DIR = pathlib.Path("audit"); AUDIT_DIR.mkdir(exist_ok=True)

def audit(event, payload):
    rec = {"ts":datetime.datetime.utcnow().isoformat(),"event":event,"payload":payload}
    with open(AUDIT_DIR/"events.jsonl","a") as f:
        f.write(json.dumps(rec)+"\n")

@app.get("/")
def root():
    return {"message":"âœ… Optimizer & Safety online","phase":"131â€“150","mode":STATE["mode"],"risk_cap":STATE["risk_cap"]}

@app.get("/dashboard",response_class=HTMLResponse)
def dashboard():
    return FileResponse("static/dashboard.html")

@app.post("/api/pause")
def pause():
    STATE["mode"]="paused"; audit("pause",{})
    return {"ok":True,"mode":STATE["mode"]}

@app.post("/api/resume")
def resume():
    STATE["mode"]="trading"; audit("resume",{})
    return {"ok":True,"mode":STATE["mode"]}

@app.get("/api/export_audit")
def export_audit():
    src = AUDIT_DIR/"events.jsonl"
    if not src.exists():
        return JSONResponse({"ok":True,"file":None})
    dst = pathlib.Path("exports")/f"audit_{int(time.time())}.jsonl"
    dst.write_text(src.read_text())
    return {"ok":True,"file":str(dst)}

@app.websocket("/ws/optimizer")
async def ws_optimizer(ws:WebSocket):
    await ws.accept()
    try:
        wins, losses = 0, 0
        dd_min = 0.0
        while True:
            # chaos testing
            fault = maybe_fault()
            # simulate market/equity
            shock = random.uniform(-300,300) * (1.5 if fault else 1.0)
            STATE["equity"] = max(50000.0, STATE["equity"] + shock)
            pnl = STATE["equity"] - 100000.0
            STATE["pnl_pct"] = pnl/100000.0
            dd_min = min(dd_min, STATE["pnl_pct"])
            STATE["max_dd_pct"] = dd_min
            STATE["var_est"] = max(0.005, min(0.05, abs(STATE["pnl_pct"])*0.8))

            # optimizer step
            params = OPT.suggest()
            score = (STATE["pnl_pct"] - abs(STATE["var_est"])*0.5) - (0.01 if fault else 0.0)
            OPT.observe(params, score)
            kpis = OPT.status()

            # canary + kill switch
            canary_ok = is_canary_good({"pnl":pnl,"latency_ms":random.uniform(25,140)})
            kill = tripped(STATE["pnl_pct"], STATE["max_dd_pct"], STATE["var_est"])
            if kill: STATE["mode"]="paused"

            # record audit
            audit("tick",{"pnl_pct":STATE["pnl_pct"],"dd_pct":STATE["max_dd_pct"],"var":STATE["var_est"],"params":params,"score":score,"fault":fault,"canary":canary_ok,"kill":kill})

            # edge mesh heartbeat
            mesh = edge_heartbeat()

            await ws.send_json({
                "equity": round(STATE["equity"],2),
                "pnl_pct": round(STATE["pnl_pct"],4),
                "max_dd_pct": round(STATE["max_dd_pct"],4),
                "var_est": round(STATE["var_est"],4),
                "mode": STATE["mode"],
                "optimizer": kpis,
                "params": params,
                "canary_ok": canary_ok,
                "fault_injected": fault,
                "mesh": mesh,
                "ts": datetime.datetime.utcnow().isoformat()
            })
            await asyncio.sleep(3)
    except WebSocketDisconnect:
        print("ðŸ”Œ WS disconnected")
