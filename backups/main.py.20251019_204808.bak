from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI(title="AI Money Web")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def root():
    return {"message": "âœ… AI Money Web Backend is alive"}

@app.get("/api/alpaca_status")
def alpaca_status():
    return {"status": "connected", "equity": 100000, "cash": 25000}

from fastapi import WebSocket, WebSocketDisconnect
import asyncio

@app.websocket("/ws/alpaca_status")
async def websocket_alpaca_status(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            # Simulate sending live Alpaca updates every 3 seconds
            await websocket.send_json({
                "status": "connected",
                "equity": 100000,
                "cash": 25000,
                "update": "mock_live"
            })
            await asyncio.sleep(3)
    except WebSocketDisconnect:
        print("ðŸ”Œ Client disconnected from /ws/alpaca_status")

from fastapi.responses import HTMLResponse

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard():
    return """
    <html>
        <head><title>AI Money Web Dashboard</title></head>
        <body style="background-color:#111;color:white;font-family:sans-serif;">
            <h1>ðŸš€ AI Money Web Dashboard</h1>
            <p>âœ… Backend is live and WebSocket is active.</p>
            <p>Next step: AI Paper Trading Engine (Phase 36)</p>
            <script>
                const ws = new WebSocket("ws://127.0.0.1:8000/ws/alpaca_status");
                ws.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    console.log("ðŸ“¡ WS Update:", data);
                };
            </script>
        </body>
    </html>
    """

