from fastapi import FastAPI,WebSocket,WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import asyncio,os,random
from ai.broker_toggle import get_account
from ai.risk_manager import compute_drawdown,position_size
from ai.fusion_engine import fuse_signals
from tools.cloud_sync import upload_logs
from tools.telegram_notifier import send

app=FastAPI(title="AI Money Web v2 Production")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,
                   allow_methods=["*"],allow_headers=["*"])
EQUITY_HISTORY=[]

@app.get("/")
def root():return{"message":"âœ… AI Money Web v2 Production Online"}

@app.get("/api/trading_status")
def trading_status():
    try:
        acct=get_account()
        eq,ca=acct["equity"],acct["cash"]
        pnl=(eq-100000)/100000;risk=abs(pnl)+0.01
        EQUITY_HISTORY.append(eq)
        draw=compute_drawdown(EQUITY_HISTORY[-50:])
        sig=fuse_signals(pnl,risk,eq,draw)
        pos=position_size(sig,eq,draw)
        send(f"ðŸ“Š Equity:{eq:.2f} Signal:{sig:.3f} Pos:{pos:.2f}")
        return{"status":"live","equity":eq,"cash":ca,"signal":sig,"drawdown":draw,"size":pos}
    except Exception as e:return{"status":"error","detail":str(e)}

@app.get("/sync")
def sync():
    try:upload_logs(os.getenv("S3_BUCKET","aimoneyweb-backups"))
    except Exception as e:return{"detail":str(e)}
    return{"synced":"âœ…"}

@app.websocket("/ws/trading_status")
async def ws(ws:WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json(trading_status())
            await asyncio.sleep(5)
    except WebSocketDisconnect:pass

@app.get("/dashboard",response_class=HTMLResponse)
def dashboard():
    if os.path.exists("static/dashboard.html"):
        return HTMLResponse(open("static/dashboard.html").read())
    return HTMLResponse("<h2>Dashboard missing â€“ rerun setup</h2>")
