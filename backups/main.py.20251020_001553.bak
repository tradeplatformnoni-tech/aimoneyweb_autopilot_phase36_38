from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from dotenv import load_dotenv
import asyncio, os, requests, sqlite3, random
from ai.ai_brain import ensure_db, log_trade, learn

load_dotenv();ensure_db()
app=FastAPI(title="AI Money Web Autopilot")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])

@app.get("/")
def root():return{"message":"âœ… AI Money Web Backend with RL Adaptive Learning"}

@app.get("/api/alpaca_status")
def alpaca_status():
    key=os.getenv("APCA_API_KEY_ID","mock");secret=os.getenv("APCA_API_SECRET_KEY","mock")
    base=os.getenv("APCA_API_BASE_URL","https://paper-api.alpaca.markets")
    try:
        if key=="mock":
            equity=100000+random.uniform(-500,500);cash=25000+random.uniform(-100,100)
            pnl=(equity-100000)/100000;log_trade(equity,pnl,abs(pnl)+0.01)
            return{"status":"mock","equity":equity,"cash":cash,"adaptive_score":learn()}
        r=requests.get(f"{base}/v2/account",headers={"APCA-API-KEY-ID":key,"APCA-API-SECRET-KEY":secret})
        data=r.json();equity=float(data.get("equity",0));cash=float(data.get("cash",0))
        pnl=(equity-100000)/100000;log_trade(equity,pnl,abs(pnl)+0.01)
        data["adaptive_score"]=learn();return data
    except Exception as e:return{"status":"error","detail":str(e)}

@app.websocket("/ws/alpaca_status")
async def ws_alpaca(ws:WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json(alpaca_status());await asyncio.sleep(3)
    except WebSocketDisconnect:print("ðŸ”Œ Client disconnected")

@app.get("/dashboard",response_class=HTMLResponse)
def dashboard():
    if os.path.exists("static/dashboard.html"):
        return HTMLResponse(open("static/dashboard.html").read())
    return HTMLResponse("<h2>Missing dashboard.html</h2>")
