from fastapi import FastAPI,WebSocket,WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from dotenv import load_dotenv
import asyncio,random,os,requests
from ai.ai_brain import ensure_db,log_trade,learn
from ai.fusion_engine import fuse_signals
from ai.risk_manager import compute_drawdown,position_size

load_dotenv();ensure_db()
app=FastAPI(title="AI Money Web Fusion Engine")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])
EQUITY_HISTORY=[]

@app.get("/")
def root():return{"message":"âœ… AI Money Web Fusion & Risk Manager Online"}

@app.get("/api/fusion_status")
def fusion_status():
    global EQUITY_HISTORY
    equity=100000+random.uniform(-500,500)
    cash=25000+random.uniform(-100,100)
    pnl=(equity-100000)/100000
    risk=abs(pnl)+0.01
    EQUITY_HISTORY.append(equity)
    drawdown=compute_drawdown(EQUITY_HISTORY[-50:])
    fused=fuse_signals(pnl,risk,equity,drawdown)
    size=position_size(fused,equity,drawdown)
    log_trade(equity,pnl,risk)
    adaptive=learn()
    return{
      "status":"connected",
      "equity":equity,
      "cash":cash,
      "drawdown":drawdown,
      "adaptive_score":adaptive,
      "fused_signal":fused,
      "position_size":size}

@app.websocket("/ws/fusion_status")
async def ws_fusion(ws:WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json(fusion_status())
            await asyncio.sleep(3)
    except WebSocketDisconnect:
        print("ðŸ”Œ Client disconnected")

@app.get("/dashboard",response_class=HTMLResponse)
def dashboard():
    if os.path.exists("static/dashboard.html"):
        return HTMLResponse(open("static/dashboard.html").read())
    return HTMLResponse("<h2>Dashboard missing â€” re-run setup</h2>")
