from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from dotenv import load_dotenv
import asyncio, os, requests

load_dotenv()
app = FastAPI(title="AI Money Web")
app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

@app.get("/")
def root():
    return {"message": "âœ… AI Money Web Backend is alive"}

@app.get("/api/alpaca_status")
def alpaca_status():
    key = os.getenv("APCA_API_KEY_ID", "mock")
    secret = os.getenv("APCA_API_SECRET_KEY", "mock")
    base = os.getenv("APCA_API_BASE_URL", "https://paper-api.alpaca.markets")
    try:
        if key == "mock":
            return {"status": "mock", "equity": 100000, "cash": 25000}
        r = requests.get(f"{base}/v2/account", headers={"APCA-API-KEY-ID": key, "APCA-API-SECRET-KEY": secret})
        return r.json()
    except Exception as e:
        return {"status": "error", "detail": str(e)}

@app.websocket("/ws/alpaca_status")
async def websocket_alpaca_status(ws: WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json(alpaca_status())
            await asyncio.sleep(3)
    except WebSocketDisconnect:
        print("ðŸ”Œ Client disconnected from /ws/alpaca_status")

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard():
    path = "static/dashboard.html"
    if os.path.exists(path):
        with open(path) as f:
            return HTMLResponse(f.read())
    return HTMLResponse("<h1>Dashboard file missing. Run Phase 36.1 setup.</h1>")
