from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import os,asyncio,random
from dotenv import load_dotenv; load_dotenv()
from ai.brokers.router import account_equity_cash, submit_market
from ai.strategy_manager import pick as pick_strategy
from ai.risk_manager import compute_drawdown, position_size
from ai.risk.hedge_engine import hedge_signal
from ai.risk.var_calc import value_at_risk
from ai.sentiment.feed import sentiment_boost
from ai.replay.replayer import replay
from ai.trade_analytics import log_trade, analyze
from tools.fills_and_audit import audit_event, list_audit

app=FastAPI(title="AI Money Web :: Phases 58–62")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])

EQUITY_HISTORY=[]; PNL_SERIES=[]
@app.get("/") 
def root(): return {"message":"✅ Phase 58–62 online"}

@app.get("/api/health") 
def health(): return {"status":"ok","equity_samples":len(EQUITY_HISTORY)}

@app.get("/api/var") 
def var_view():
    return {"VaR":value_at_risk(PNL_SERIES)}

@app.get("/api/replay")
def replay_fills(): 
    import io,sys
    old=sys.stdout; buf=io.StringIO(); sys.stdout=buf; replay(); sys.stdout=old
    return {"replay":buf.getvalue()}

@app.get("/dashboard",response_class=HTMLResponse)
def dashboard():
    return HTMLResponse(open("static/dashboard.html").read())

@app.websocket("/ws/trading_status")
async def ws(ws:WebSocket):
    await ws.accept()
    while True:
        eq,ca=account_equity_cash()
        EQUITY_HISTORY.append(eq)
        pnl=(eq-100000)/100000; PNL_SERIES.append(pnl)
        risk=abs(pnl)+0.01
        dd=compute_drawdown(EQUITY_HISTORY[-60:])
        signal=pick_strategy(pnl,risk)
        signal=hedge_signal(signal)
        signal+=sentiment_boost("AAPL")
        size=position_size(signal,eq,dd)
        side="buy" if signal>0 else "sell"
        order=submit_market("AAPL",side,max(int(size/200),1))
        log_trade("AAPL",side,max(int(size/200),1),eq,eq,signal,dd)
        audit_event("trade",f"{side} {eq} sig={signal:.3f} dd={dd:.3f}")
        var=value_at_risk(PNL_SERIES)
        await ws.send_json({"equity":eq,"cash":ca,"signal":signal,"drawdown":dd,"VaR":var})
        await asyncio.sleep(5)
