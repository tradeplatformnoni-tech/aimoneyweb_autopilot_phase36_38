from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from dotenv import load_dotenv; load_dotenv()
import os,asyncio,random
from ai.brokers.router import account_equity_cash, submit_market
from ai.strategy_manager import pick as pick_strategy
from ai.risk.var_calc import value_at_risk
from ai.sentiment.feed import sentiment_boost
from ai.rl.deep_trainer import train_rl, load_signal
from ai.cloud.syncer import upload_model

app=FastAPI(title="AI Money Web RL Cloud (Phases 63–68)")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])

EQUITY_HISTORY=[]; PNL_SERIES=[]
@app.get("/")
def root(): return {"message":"✅ AI Money RL Cloud Active"}

@app.get("/api/train")
def train():
    r=train_rl(); upload_model("models/deep_rl_model.pt")
    return r

@app.get("/api/metrics")
def metrics():
    import numpy as np
    eq=np.array(EQUITY_HISTORY[-60:]) if len(EQUITY_HISTORY)>10 else np.array([100000])
    pnl=eq[-1]-eq[0]; std=np.std(np.diff(eq)) or 1
    sharpe=pnl/std; win_rate=random.uniform(0.4,0.9)
    return {"sharpe":float(sharpe),"win_rate":win_rate}

@app.get("/dashboard",response_class=HTMLResponse)
def dash():
    return HTMLResponse(open("static/dashboard.html").read())

@app.websocket("/ws/rl_status")
async def ws(ws:WebSocket):
    await ws.accept()
    while True:
        eq,ca=account_equity_cash(); EQUITY_HISTORY.append(eq)
        pnl=(eq-100000)/100000; risk=abs(pnl)+0.01; dd=risk*random.random()
        sent=sentiment_boost("AAPL")
        sig_rl=load_signal(pnl,dd,risk,sent)
        total_sig=pick_strategy(pnl,risk)+sig_rl
        side="buy" if total_sig>0 else "sell"
        submit_market("AAPL",side,1)
        var=value_at_risk([pnl])
        await ws.send_json({"equity":eq,"signal":total_sig,"VaR":var,"sent":sent})
        await asyncio.sleep(5)
