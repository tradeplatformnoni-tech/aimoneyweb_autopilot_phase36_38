from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse
import asyncio, os, datetime, random, json, pathlib

app = FastAPI(title="AI Money Web :: Federated Cloud Trainer (111â€“120)")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def root():
    return {
        "message": "âœ… Federated Trainer Node active",
        "phase": "111â€“120",
        "timestamp": datetime.datetime.utcnow().isoformat(),
        "cloud_backup": True,
        "node_id": random.randint(1000,9999),
    }

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard():
    return FileResponse("static/dashboard.html")

@app.websocket("/ws/federated")
async def ws_federated(ws: WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json({
                "node_id": random.randint(1000,9999),
                "peer_nodes": random.randint(2,10),
                "sync_rate": round(random.uniform(0.5, 1.0), 2),
                "loss_delta": round(random.uniform(-0.005, 0.01), 4),
                "upload_status": random.choice(["uploaded","pending","complete"]),
                "timestamp": datetime.datetime.utcnow().isoformat()
            })
            await asyncio.sleep(4)
    except WebSocketDisconnect:
        print("ðŸ”Œ Client disconnected from /ws/federated")

@app.post("/api/cloud_backup")
async def cloud_backup():
    # Simulated upload to cloud folder
    log_path = pathlib.Path("logs/federated_sync.log")
    cloud_dir = pathlib.Path("cloud")
    cloud_dir.mkdir(exist_ok=True)
    backup_name = f"trainer_backup_{datetime.datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.json"
    data = {"backup_time": datetime.datetime.utcnow().isoformat(), "nodes": random.randint(3,12)}
    (cloud_dir / backup_name).write_text(json.dumps(data, indent=2))
    log_path.write_text(f"Uploaded: {backup_name}\n", encoding="utf-8")
    return {"status":"uploaded","file":backup_name}
