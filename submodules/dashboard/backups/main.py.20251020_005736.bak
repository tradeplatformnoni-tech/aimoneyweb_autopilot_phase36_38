from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import asyncio, random, os
from ai.fusion_engine import fuse_signals
from ai.risk_manager import compute_drawdown, position_size
from ai.trade_executor import place_trade, get_positions
from ai.trade_analytics import log_trade, analyze
from dotenv import load_dotenv
load_dotenv()

app = FastAPI(title="AI Money Web :: Phases 46â€“49")
app.add_middleware(CORSMiddleware,allow_origins=["*"],allow_credentials=True,allow_methods=["*"],allow_headers=["*"])
EQUITY_HISTORY=[]

@app.get("/")
def root(): return {"message":"âœ… AI Money Web Paper Trading Mode Active"}

@app.get("/api/trading_status")
def status():
    equity=100000+random.uniform(-500,500)
    cash=25000+random.uniform(-200,200)
    pnl=(equity-100000)/100000
    risk=abs(pnl)+0.01
    EQUITY_HISTORY.append(equity)
    draw=compute_drawdown(EQUITY_HISTORY[-50:])
    sig=fuse_signals(pnl,risk,equity,draw)
    size=position_size(sig,equity,draw)
    oid=place_trade(sig,size)
    log_trade("AAPL","buy" if sig>0 else "sell",int(size/200),equity,equity,sig,draw)
    return {"equity":equity,"cash":cash,"signal":sig,"drawdown":draw,"trade_id":oid,"positions":get_positions(),"analytics":analyze()}

@app.websocket("/ws/trading_status")
async def ws(ws:WebSocket):
    await ws.accept()
    try:
        while True:
            await ws.send_json(status())
            await asyncio.sleep(5)
    except WebSocketDisconnect:
        print("ðŸ”Œ Client disconnected")

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard():
    if os.path.exists("static/dashboard.html"):
        return HTMLResponse(open("static/dashboard.html").read())
    return HTMLResponse("<h3>Dashboard missing â€” rerun setup.</h3>")
